library(tidyverse)
library(EDASeq)
library(edgeR)
library(RUVSeq)
library(BiocManager)
library(Seurat)
library(swapper)
library(iCOBRA)
library(rlist)

source('~/pseudoRUV/auxf.R')
set <- readRDS("~/pseudoRUV/lupustosims.rds")
keepg <- rowSums(counts(set) >= 5) >= 3
set <- set[keepg,]

covs <- pData(set)
hkGagnon <- read.csv("~/pseudoRUV/Genes_Gagnon.txt", sep="")
hkGagnon <- unlist(hkGagnon)
filter<-FindVariableFeatures(counts(set),selection.method = 'vst')
high_varg <- which(filter[hkGagnon,]$variance.standardized>1.8)
hk.ind <- rownames(set) %in% hkGagnon[-high_varg]
hkname <-  rownames(set)[hk.ind]
celltypes <- c('B', 'NK', 'T4', 'T8', 'cDC', 'cM', 'ncM', 'pDC')
sampleNames(set@phenoData) <- sampleNames(set@assayData)
pmin <- find_p(counts(set))
set <- betweenLaneNormalization2.SeqES(set, which="upper", upper.p=pmin)




# No DE -------------------------------------------------------------------

  set.sim <- set
  set.sim <- betweenLaneNormalization2.SeqES(set.sim, which="upper", upper.p=pmin)
  
  #### RUVr ####  
  
  group <- factor(paste(set.sim$fake.tr, set.sim$cg_cov,sep=".")) 
  design <- model.matrix(~ 0 + group )
  colnames(design)<-levels(group)
  y <- DGEList(counts=counts(set.sim), group = group)
  y <- calcNormFactors(y,  method="upperquartile",p=pmin)
  y <- estimateGLMCommonDisp(y, design)
  y <- estimateGLMTagwiseDisp(y, design)
  fit <- glmFit(y, design)
  E <- residuals(fit, type="deviance")
  
  # unwanted factors: cohorts, batches, labs, lib size. but no more than 1 cohort per batch. so at least 3 factors 
  ruvrtype1F <- RUVr(x=normCounts(set.sim), cIdx= rownames(set.sim), k=3, residuals=E)
  ruvrtype1 <- list()
  
  for (ct in celltypes){
    ruvrtype1[[ct]] <- list(W = ruvrtype1F$W[set.sim$cg_cov==ct,],
                            normalizedCounts = ruvrtype1F$normalizedCounts[,set.sim$cg_cov==ct])
  }
  
  ruvrT1DEA <-list()
  
  for(ct in celltypes){
    
    subset <- set.sim[,set.sim$cg_cov==ct]
    keepg <- rowSums(counts(set.sim[,set.sim$cg_cov==ct]) >= 5) >= 3
    #sampleNames(subset@phenoData) <- sampleNames(subset@assayData)
    subset <- subset[unlist(keepg),]
    Ws <- ruvrtype1[[ct]]$W
    res <- DEA.matrix(subset,trt=subset$fake.tr,Z=Ws)
    ruvrT1DEA[[ct]] <-  mutate(res$lrt$table, FDR=p.adjust(PValue, 'BH'), DEG=ifelse(FDR<0.01,T,F))
    
    
  }
  
  #### RUVg #### 
  
  ruvgtype1F <-RUVg(normCounts(set.sim),hk.ind, k=3) # less time doesnt estimate dispersion parameters
  
  ruvgtype1 <- list()
  
  for (ct in celltypes){
    ruvgtype1[[ct]] <- list(W = ruvgtype1F$W[set.sim$cg_cov==ct,],
                            normalizedCounts = ruvgtype1F$normalizedCounts[,set.sim$cg_cov==ct])
  }
  
  ruvgT1DEA <-list()
  
  for(ct in celltypes){
    
    subset <- set.sim[,set.sim$cg_cov==ct]
    keepg <- rowSums(counts(subset) >= 5) >= 3
    subset <- subset[keepg,]
    Ws <- ruvgtype1[[ct]]$W
    res <- DEA.matrix(subset,trt=subset$fake.tr,Z=Ws)
    ruvgT1DEA[[ct]] <-  mutate(res$lrt$table, FDR=p.adjust(PValue, 'BH'), DEG=ifelse(FDR<0.01,T,F))
    
    
  }
  
  #### RUVrT2 ####
  
  ruvrtype2 <- list()
  ruvrT2DEA <- list()
  ruvgtype2 <- list()
  ruvgT2DEA <- list()
  
  rawT2 <- list()
  truth <- list()
  for(ct in celltypes){
    
    subset <- set.sim[,set.sim$cg_cov==ct]
    keepg <- rowSums(counts(subset) >= 5) >= 3
    subset <- subset[keepg,]
    subset <- betweenLaneNormalization2.SeqES(subset, which="upper", upper.p=pmin)
    
    hk.ind.s <- rownames(subset) %in% hkGagnon[-high_varg]
    hkname.s <-  rownames(subset)[hk.ind.s]
    
    
    res <- DEA(subset,trt='fake.tr')
    rawT2[[ct]] <- mutate(res$lrt$table, FDR=p.adjust(PValue, 'BH'), DEG=ifelse(FDR<0.01,T,F))
    ruvrtype2[[ct]] <- RUVr(x=normCounts(subset),cIdx= rownames(subset), k=3,residuals= res$residuals)
    Ws <- ruvrtype2[[ct]]$W
    res <- DEA.matrix(subset,subset$fake.tr,Z=Ws)
    ruvrT2DEA[[ct]] <- mutate(res$lrt$table, FDR=p.adjust(PValue, 'BH'), DEG=ifelse(FDR<0.01,T,F))
    
    ruvgtype2[[ct]] <- RUVg(x= normCounts(subset),cIdx = hkname.s, k=3)
    Ws <- ruvgtype2[[ct]]$W
    res <- DEA.matrix(subset,subset$fake.tr,Z=Ws)
    ruvgT2DEA[[ct]] <- mutate(res$lrt$table, FDR=p.adjust(PValue, 'BH'), DEG=ifelse(FDR<0.01,T,F))

    
  }  
  
  
  pval <- NULL  
  pval[['ind']] <- mapply(function(x,ct) paste0(ct,'_',row.names(x)),rawT2,names(rawT2),SIMPLIFY = F)
  pval[['raw']] <- sapply(rawT2, function(x) x$PValue, simplify = F)
  pval[['rT1']] <- sapply(ruvrT1DEA, function(x) x$PValue, simplify = F)  
  pval[['gT1']] <- sapply(ruvgT1DEA, function(x) x$PValue, simplify = F)
  pval[['rT2']] <- sapply(ruvrT2DEA, function(x) x$PValue, simplify = F)
  pval[['gT2']] <- sapply(ruvgT2DEA, function(x) x$PValue, simplify = F)
  
  pval <- list_transpose(pval) %>% lapply(bind_cols )
  
  fullpval <- list_rbind(pval,names_to='ct') %>% pivot_longer(-c(ind,ct),names_to = 'type')
  
  ggplot(fullpval, aes(x=value)) + geom_histogram()+facet_grid(ct~type)+ theme_minimal()



# DE sim type 1 -----------------------------------------------------------

samp_to_swap <- set$fake.tr == "A"
seeds <- round(seq(1,200,length.out=100))

its <- list()
pvalits <- list()
truthits <- list()
i=1

for(i in 1:length(seeds)){
  set.sim <- set
  set.seed(seeds[i])
  sim <- simulateDE(counts(set)[!rownames(set) %in% hkname,], which_cols = samp_to_swap, prop_DE = 0.1)
  counts(set.sim)[!rownames(set) %in% hkname,] <- assays(sim)$counts
  fData(set.sim)$trueDE <- FALSE
  fData(set.sim)$trueDE[!rownames(set) %in% hkname] <- sim@elementMetadata@listData[["is_DE"]]  
  set.sim <- betweenLaneNormalization2.SeqES(set.sim, which="upper", upper.p=pmin)
  
  #### RUVr ####  
  
  group <- factor(paste(set.sim$fake.tr, set.sim$cg_cov,sep=".")) 
  design <- model.matrix(~ 0 + group )
  colnames(design)<-levels(group)
  y <- DGEList(counts=counts(set.sim), group = group)
  y <- calcNormFactors(y,  method="upperquartile",p=pmin)
  y <- estimateGLMCommonDisp(y, design)
  y <- estimateGLMTagwiseDisp(y, design)
  fit <- glmFit(y, design)
  E <- residuals(fit, type="deviance")
  
  # unwanted factors: cohorts, batches, labs, lib size. but no more than 1 cohort per batch. so at least 3 factors 
  ruvrtype1F <- RUVr(x=normCounts(set.sim), cIdx= rownames(set.sim), k=3, residuals=E)
  ruvrtype1 <- list()
  
  for (ct in celltypes){
    ruvrtype1[[ct]] <- list(W = ruvrtype1F$W[set.sim$cg_cov==ct,],
                            normalizedCounts = ruvrtype1F$normalizedCounts[,set.sim$cg_cov==ct])
  }
  
  ruvrT1DEA <-list()
  
  for(ct in celltypes){
    
    subset <- set.sim[,set.sim$cg_cov==ct]
    keepg <- rowSums(counts(set.sim[,set.sim$cg_cov==ct]) >= 5) >= 3
    #sampleNames(subset@phenoData) <- sampleNames(subset@assayData)
    subset <- subset[unlist(keepg),]
    Ws <- ruvrtype1[[ct]]$W
    res <- DEA.matrix(subset,trt=subset$fake.tr,Z=Ws)
    ruvrT1DEA[[ct]] <-  mutate(res$lrt$table, FDR=p.adjust(PValue, 'BH'), DEG=ifelse(FDR<0.01,T,F))
    
    
  }
  
  #### RUVg #### 
  
  ruvgtype1F <-RUVg(normCounts(set.sim),hk.ind, k=3) # less time doesnt estimate dispersion parameters
  
  ruvgtype1 <- list()
  
  for (ct in celltypes){
    ruvgtype1[[ct]] <- list(W = ruvgtype1F$W[set.sim$cg_cov==ct,],
                            normalizedCounts = ruvgtype1F$normalizedCounts[,set.sim$cg_cov==ct])
  }
  
  ruvgT1DEA <-list()
  
  for(ct in celltypes){
    
    subset <- set.sim[,set.sim$cg_cov==ct]
    keepg <- rowSums(counts(subset) >= 5) >= 3
    subset <- subset[keepg,]
    Ws <- ruvgtype1[[ct]]$W
    res <- DEA.matrix(subset,trt=subset$fake.tr,Z=Ws)
    ruvgT1DEA[[ct]] <-  mutate(res$lrt$table, FDR=p.adjust(PValue, 'BH'), DEG=ifelse(FDR<0.01,T,F))
    
    
  }

  #### RUVrT2 ####
  
  ruvrtype2 <- list()
  ruvrT2DEA <- list()
  ruvgtype2 <- list()
  ruvgT2DEA <- list()
  
  rawT2 <- list()
  truth <- list()
  for(ct in celltypes){
    
    subset <- set.sim[,set.sim$cg_cov==ct]
    keepg <- rowSums(counts(subset) >= 5) >= 3
    subset <- subset[keepg,]
    subset <- betweenLaneNormalization2.SeqES(subset, which="upper", upper.p=pmin)
    
    hk.ind.s <- rownames(subset) %in% hkGagnon[-high_varg]
    hkname.s <-  rownames(subset)[hk.ind.s]
    
    
    res <- DEA(subset,trt='fake.tr')
    rawT2[[ct]] <- mutate(res$lrt$table, FDR=p.adjust(PValue, 'BH'), DEG=ifelse(FDR<0.01,T,F))
    ruvrtype2[[ct]] <- RUVr(x=normCounts(subset),cIdx= rownames(subset), k=3,residuals= res$residuals)
    Ws <- ruvrtype2[[ct]]$W
    res <- DEA.matrix(subset,subset$fake.tr,Z=Ws)
    ruvrT2DEA[[ct]] <- mutate(res$lrt$table, FDR=p.adjust(PValue, 'BH'), DEG=ifelse(FDR<0.01,T,F))
    
    ruvgtype2[[ct]] <- RUVg(x= normCounts(subset),cIdx = hkname.s, k=3)
    Ws <- ruvgtype2[[ct]]$W
    res <- DEA.matrix(subset,subset$fake.tr,Z=Ws)
    ruvgT2DEA[[ct]] <- mutate(res$lrt$table, FDR=p.adjust(PValue, 'BH'), DEG=ifelse(FDR<0.01,T,F))
    
    truth[[ct]] <- data.frame(status = subset@featureData@data$trueDE,
                        gene = paste0(row.names(subset),'_',i),
                        ind =  paste0(ct,'_',row.names(subset),'_',i))
    
  }  
  
  
  pval <- NULL  
  pval[['ind']] <- mapply(function(x,ct) paste0(ct,'_',row.names(x),'_',i),rawT2,names(rawT2),SIMPLIFY = F)
  pval[['raw']] <- sapply(rawT2, function(x) x$PValue, simplify = F)
  pval[['rT1']] <- sapply(ruvrT1DEA, function(x) x$PValue, simplify = F)  
  pval[['gT1']] <- sapply(ruvgT1DEA, function(x) x$PValue, simplify = F)
  pval[['rT2']] <- sapply(ruvrT2DEA, function(x) x$PValue, simplify = F)
  pval[['gT2']] <- sapply(ruvgT2DEA, function(x) x$PValue, simplify = F)
  
  pval <- list_transpose(pval) %>% lapply(bind_cols )
  
  
  pvalits[[i]] <- pval
  truthits[[i]] <- truth
  
  #its[[i]] <- mapply(function(x,y) TPFDcurve(x,y),pval,truth,SIMPLIFY=F)
  
  print(paste('it ',i))
}

pvalits <- list_transpose(pvalits)
pvalits <- lapply(pvalits, function (x) bind_rows(x) %>% column_to_rownames('ind') )

truthits <- list_transpose(truthits)
truthits <- lapply(truthits, function (x) bind_rows(x) %>% column_to_rownames('ind') )


COBRADatalist <- mapply(COBRAData,pval=pvalits,truth = truthits, SIMPLIFY = F)
COBRADatalist <- lapply(COBRADatalist,calculate_adjp)
cobraperflist <- lapply(COBRADatalist,calculate_performance, 
                        binary_truth = "status")
cobratoplot <- lapply(cobraperflist, prepare_data_for_plot, colorscheme = "Dark2", 
                                   facetted = TRUE)

plotscobra <- lapply(cobratoplot,plot_fdrtprcurve)



pvalits <- list_rbind(pvalits)
truthits <- list_rbind(truthits,names_to='ct')
rownames(truthits) <- truthits$ind
truthits$status <- as.numeric(truthits$status)

cobradata <- COBRAData(pval=pvalits,truth = truthits)
cobradata <- calculate_adjp(cobradata)
cobraperf <- calculate_performance(cobradata,binary_truth = "status",splv = "ct")
cobraplot <- prepare_data_for_plot(cobraperf, colorscheme = "Dark2", 
                                   facetted = TRUE)

plot_tpr(cobraplot )

COBRAapp(cobradata)
plot_fdrtprcurve(cobraplot)
#write_rds(its,'sims2428T4NK.rds')


cbind(pvalits2)

cbind(pvalits)


cobradata <- COBRAData(pval = pval, truth = truth)
cobradata <- calculate_adjp(cobradata)
cobraperf <- calculate_performance(cobradata, binary_truth = "status", 
                                   cont_truth = "logFC", splv = "none",
                                   maxsplit = 4)
cobraplot <- prepare_data_for_plot(cobraperf, colorscheme = "Dark2", 
                                   facetted = TRUE)
plot_tpr(cobraplot)
plot_fdrtprcurve(cobraplot)



# FDCits <- map_depth(its,2, function(x)x$FDC)
# FDCits <- list_transpose(FDCits) #higher level is cell type
# 
# TPCits <- map_depth(its,2, function(x)x$TPC)
# TPCits <- list_transpose(TPCits) #higher level is cell type

# curveplots <- mapply(FDTPplot, FDCits,TPCits, SIMPLIFY = F)
# 
# curveplots$T4 + ylim(0.4,0.9)+xlim(0,0.1)
# curveplots$NK + ylim(0.4,0.9)+xlim(0,0.1)





# Old code ------------------------------------------------------------------

## No DE ------------------------------------------------------------------

subset <- set[,set$cg_cov=='B']
sampleNames(subset@phenoData) <- sampleNames(subset@assayData)
covs <- pData(subset)

subcovs <- select(covs, -sample_cell, -cg_cov)  

design <- model.matrix(~fake.tr  , data=pData(subset))
y <- DGEList(counts=counts(subset), group=subset$fake.tr)
y <- calcNormFactors(y, method="upperquartile")
y <- estimateGLMCommonDisp(y, design)
y <- estimateGLMTagwiseDisp(y, design)

fit <- glmFit(y, design)
lrt <- glmLRT(fit, coef=2)
res <- residuals(fit, type="deviance")
topTags(lrt)
hist(lrt$table$PValue)


# RUVr --------------------------------------------------------------------

setr <- RUVr(x=subset,cIdx= rownames(subset), k=4,residuals= res)
design <- model.matrix(~fake.tr +W_1 + W_2 + W_3 + W_4 , data=pData(setr))
y <- DGEList(counts=counts(setr), group=setr$fake.tr)
y <- calcNormFactors(y, method="upperquartile")
y <- estimateGLMCommonDisp(y, design)
y <- estimateGLMTagwiseDisp(y, design)

fit <- glmFit(y, design)
lrt <- glmLRT(fit, coef=2)
hist(lrt$table$PValue)
topTags(lrt)

# RUVg --------------------------------------------------------------------



setg <- RUVg(x= subset,cIdx = hkname, k=4)
design <- model.matrix(~fake.tr +W_1 + W_2 + W_3 + W_4 , data=pData(setg))
y <- DGEList(counts=counts(setg), group=setr$fake.tr)
y <- calcNormFactors(y, method="upperquartile")
y <- estimateGLMCommonDisp(y, design)
y <- estimateGLMTagwiseDisp(y, design)

fit <- glmFit(y, design)
lrt <- glmLRT(fit, coef=2)
hist(lrt$table$PValue)
topTags(lrt)


## DE --------------------------------------------------------------------


its <- list()



for(i in 1:length(seeds)){
  
  set.seed(seeds[i])
  sim.a <- simulateDE(counts(subset)[!rownames(subset) %in% hkname,], which_cols = samples_to_swap, prop_DE = 0.1)
  subset.a <- subset
  counts(subset.a)[!rownames(subset) %in% hkname,] <- assays(sim.a)$counts
  subset.a@featureData@data$trueDE <- FALSE
  subset.a@featureData@data$trueDE[!rownames(subset) %in% hkname] <- sim.a@elementMetadata@listData[["is_DE"]]  
  pmin <- find_p(counts(subset.a))
  subset.a <- betweenLaneNormalization2.SeqES(subset.a, which="upper",offset = T, upper.p=pmin)
  
  raw.a <- DEA(subset.a,trt='fake.tr')
  
  
  
  subsetr.a <- RUVr(x=normCounts(subset.a),cIdx= rownames(subset.a), k=1,residuals= raw.a$residuals)
  f.names <- grep("W_", colnames(pData(subsetg.a)),value=T)
  ruvr.a <- DEA(subsetr.a,trt='fake.tr',Z=f.names)
  
  subsetg.a <- RUVg(x= normCounts(subset.a),cIdx = hkname, k=1)
  f.names <- grep("W_", colnames(pData(subsetg.a)),value=T)
  ruvg.a <- DEA(subsetg.a,trt='fake.tr',Z=f.names)
  
  pval <- data.frame(raw = raw.a$lrt$table$PValue,
                     ruvr = ruvr.a$lrt$table$PValue,
                     ruvg = ruvg.a$lrt$table$PValue,
                     row.names = rownames(raw.a$lrt$table))
  truth <- data.frame(status = subset.a@featureData@data$trueDE,
                      row.names = row.names(subset.a))
  
  its[[i]] <- TPFDcurve(pval,truth)
  
  
}

FDCits<- list.select(its,FDC)
FDRC <-  lapply(FDCits,as.data.frame) %>% list_rbind(names_to='it') %>%
  group_by(FDC.cuts) %>% summarise(across(everything(), list(mean)))%>% 
  dplyr::select(-it_1)%>% pivot_longer(-FDC.cuts, names_to = 'type',values_to = 'FDR')%>%
  mutate(type=gsub("FDC.|_1","",type))

TPCits<- list.select(its,TPC)
TPRC <-  lapply(TPCits,as.data.frame) %>% list_rbind(names_to='it') %>%
  group_by(TPC.cuts) %>% summarise(across(everything(), list(mean)))%>% 
  dplyr::select(-it_1)%>% pivot_longer(-TPC.cuts, names_to= 'type', values_to = 'TPR')%>%
  mutate(type=gsub("TPC.|_1","",type))

curves <- left_join(FDRC,TPRC,by=c('FDC.cuts'='TPC.cuts','type'))

ggplot(curves, aes(x=FDR,y=TPR,color=type))+geom_line()




# prevs -------------------------------------------------------------------




P.a <- sum(DEG.a$DEG)
N.a <- sum(!DEG.a$DEG)
TP.a <- sum(rownames(DEG.a)[DEG.a$DEG]%in%rownames(subset.a)[subset.a@featureData@data$trueDE])
FN.a <- sum(rownames(DEG.a)[!DEG.a$DEG]%in%rownames(subset.a)[subset.a@featureData@data$trueDE])
FPP.a <- (P.a-TP.a)/N.a




sum(rownames(raw.a$lrt$table)!=rownames(ruvr.a$lrt$table))

pval <- data.frame(raw = raw.a$lrt$table$PValue,
                   ruvr = ruvr.a$lrt$table$PValue,
                   ruvg = ruvg.a$lrt$table$PValue,
                   row.names = rownames(raw.a$lrt$table))
truth <- data.frame(status = subset.a@featureData@data$trueDE,
                    row.names = row.names(subset.a))
cobradata <- COBRAData(pval = pval, truth = truth)
cobradata <- calculate_adjp(cobradata)
cobraperf <- calculate_performance(cobradata, binary_truth = "status", splv = "none",
                                   aspects = c("fdrtpr"),
                                   thrs = c(seq(10^-16,0.01,length.out=1000),seq(0.01,1,length.out=5000)))

system.time(its[[i]] <- TPFDcurve(pval,truth))
system.time(cobraperf <- calculate_performance(cobradata, binary_truth = "status", splv = "none",
                                               aspects = c("fdrtpr"),
                                               thrs = c(seq(10^-16,0.01,length.out=1000),seq(0.01,1,length.out=5000))))




cobraplot <- prepare_data_for_plot(cobraperf, colorscheme = "Dark2", 
                                   facetted = TRUE)
plot_tpr(cobraplot)
plot_fdrtprcurve(cobraplot)

